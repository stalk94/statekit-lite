{"version":3,"sources":["../src/store.ts","../src/sync-plugin.ts","../src/plugins/sse-plugin.ts"],"sourcesContent":["import { useSyncExternalStore } from \"react\";\r\nimport { produce } from \"immer\";\r\n\r\n\r\ntype ValueOrUpdater<T> = T | ((prev: T) => T);\r\nexport type StorePlugin = (store: ProxyState<any>) => void;\r\ntype PersistConfig = boolean | { key: string };\r\n\r\n\r\nexport type Unsubscribe = () => void;\r\nexport type ProxyState<T> = {\r\n    /** \r\n     *  🔗 `.get()` — object references  \r\n     *  🗐 `.get(true)` — structured clone \r\n     */\r\n    get: (clone?: boolean) => T;\r\n\r\n    /**\r\n     *  📌 `.set(value)` — direct replace  \r\n     *  🔁 `.set(prev => next)` — functional update  \r\n     *  🧠 `.set(draft => { draft.x = 1 })` — safe mutation via Immer  \r\n     */\r\n    set: (value: ValueOrUpdater<T>) => void;\r\n\r\n    /**\r\n     *  ✏️ Direct updater, same as `.set(prev => fn(prev))`  \r\n     */\r\n    update: (fn: (prev: T) => T) => void;\r\n\r\n    /**\r\n    *  ⚛️ React hook that subscribes to this value. Automatically triggers re-render when value changes  \r\n    *\r\n    *  📌 Must be called inside a React component or hook  \r\n    *  Equivalent to `.get()` but reactive  \r\n    *\r\n    *  @returns Current value of the state at this path\r\n    */\r\n    use: () => T;\r\n\r\n    /**\r\n     *  👁 Subscribes to external (non-React) changes  \r\n     *  Useful for triggering side effects when value changes  \r\n     *\r\n     *  @returns Unsubscribe function\r\n     *  @example\r\n     *  const unsub = state.user.name.watch((val) => console.log(val));\r\n     *  unsub();\r\n     */\r\n    watch: (fn: (val: T, unsub: () => void) => void) => Unsubscribe;\r\n\r\n    /**\r\n     *  🗐 Returns a deep cloned plain value  \r\n     *  Functions and components are preserved by reference  \r\n     */\r\n    export: () => T;\r\n} & (T extends object\r\n    ? {\r\n        [K in keyof T]: ProxyState<T[K]>;\r\n    }\r\n    : {});\r\n\r\n\r\ninterface StoreOptions {\r\n    /** 🛢️ localStorage `{key: 'myState'}` */\r\n    persist?: PersistConfig\r\n    /** ⚛️ enable redux dev tool log */\r\n    devtools?: boolean | { name: string }\r\n    /** 🔧 default: false */\r\n    immer?: boolean\r\n    /**\r\n     * 🧩 array plugins function\r\n     */\r\n    plugins?: StorePlugin[]\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////////\r\nfunction safeClone(obj: any): any {\r\n    if (typeof obj !== 'object' || obj === null) return obj;\r\n    if (Array.isArray(obj)) return obj.map(safeClone);\r\n\r\n    const result: any = {};\r\n    for (const key in obj) {\r\n        const val = obj[key];\r\n        result[key] = typeof val === 'function' ? val : safeClone(val);\r\n    }\r\n    return result;\r\n}\r\nfunction getByPath(obj: any, path: (string | number)[]): any {\r\n    return path.reduce((acc, key) => acc?.[key], obj);\r\n}\r\nfunction setByPath(obj: any, path: (string | number)[], val: any): any {\r\n    if (!path.length) return val;\r\n    const [key, ...rest] = path;\r\n    const isIndex = typeof key === \"number\" || /^\\d+$/.test(String(key));\r\n    const prev = obj ?? (isIndex ? [] : {});\r\n    const clone = Array.isArray(prev) ? [...prev] : { ...prev };\r\n    clone[key] = setByPath(prev[key], rest, val);\r\n    return clone;\r\n}\r\nfunction pathToString(path: (string | number)[]) {\r\n    return path.join(\".\");\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////////\r\n\r\n\r\nexport function createStore<T extends object>(initialValue: T, options: StoreOptions = {}): ProxyState<T> {\r\n    const key =\r\n        typeof options.persist === \"object\"\r\n            ? options.persist.key\r\n            : options.persist === true\r\n                ? \"statekit-store-\" + Math.random().toString(36).slice(2)\r\n                : null;\r\n\r\n    let value: T = initialValue;\r\n    let devtools: any = null;\r\n    let lastUpdatedPath: string | null = null;\r\n\r\n    if (typeof window !== 'undefined' && options.devtools) {\r\n        const ext = (window as any).__REDUX_DEVTOOLS_EXTENSION__;\r\n        if (ext?.connect) {\r\n            devtools = ext.connect({\r\n                name: typeof options.devtools === 'object' ? options.devtools.name ?? 'statekit' : 'statekit'\r\n            });\r\n            devtools.init(safeClone(value));\r\n        }\r\n    }\r\n    if (typeof window !== \"undefined\" && key) {\r\n        const stored = localStorage.getItem(key);\r\n        if (stored) {\r\n            try {\r\n                value = JSON.parse(stored);\r\n            } catch {\r\n                value = initialValue;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    const listeners = new Set<() => void>();\r\n    const watchers = new Map<string, Set<(val: any) => void>>();\r\n    const notify = () => listeners.forEach((l) => l());\r\n\r\n\r\n    const store = {\r\n        get: () => value,\r\n        set: (v: T) => {\r\n            value = v;\r\n\r\n            if (typeof window !== \"undefined\" && key) {\r\n                localStorage.setItem(key, JSON.stringify(value));\r\n            }\r\n            if (devtools) {\r\n                devtools.send({ type: `[set] ${lastUpdatedPath ?? \"unknown\"}` }, safeClone(value));\r\n            }\r\n\r\n            notify();\r\n            watchers.forEach((fns, pathStr) => {\r\n                const path = pathStr.split(\".\");\r\n                const val = getByPath(value, path);\r\n                fns.forEach(fn => fn(val));\r\n            });\r\n        },\r\n        subscribe: (cb: () => void) => {\r\n            listeners.add(cb);\r\n            return () => listeners.delete(cb);\r\n        },\r\n    }\r\n\r\n    function createProxy(path: (string | number)[]): any {\r\n        const pathStr = pathToString(path);\r\n\r\n        const api = {\r\n            get: (clone = false) => {\r\n                const val = getByPath(store.get(), path);\r\n                return clone ? structuredClone(val) : val;\r\n            },\r\n            set: (val: any) => {\r\n                const prev = getByPath(store.get(), path);\r\n\r\n                const next = typeof val === \"function\"\r\n                    ? options.immer ? produce(prev, val) : val(prev)\r\n                    : val;\r\n\r\n                lastUpdatedPath = pathStr;\r\n                store.set(setByPath(store.get(), path, next));\r\n            },\r\n            update: (fn: (prev: any) => any) => {\r\n                const current = getByPath(store.get(), path);\r\n                const next = fn(current);\r\n                store.set(setByPath(store.get(), path, next));\r\n            },\r\n            use: () => useSyncExternalStore(store.subscribe, () =>\r\n                getByPath(store.get(), path)\r\n            ),\r\n            watch: (fn: (val: any, unsub: Unsubscribe) => void) => {\r\n                if (!watchers.has(pathStr)) {\r\n                    watchers.set(pathStr, new Set());\r\n                }\r\n\r\n                const set = watchers.get(pathStr)!;\r\n\r\n                const wrapped = (val: any) => fn(val, unsub);\r\n                set.add(wrapped);\r\n\r\n                const unsub = () => set.delete(wrapped);\r\n                return unsub;\r\n            },\r\n            export: () => safeClone(getByPath(store.get(), path)),\r\n            toJSON: () => getByPath(store.get(), path),\r\n        }\r\n\r\n        return new Proxy(api, {\r\n            get(target, prop) {\r\n                if (prop in target) return (target as any)[prop];\r\n                return createProxy([...path, prop as string]);\r\n            }\r\n        });\r\n    }\r\n\r\n    const proxyStore = createProxy([]) as ProxyState<T>;\r\n    const cleanups: (() => void)[] = [];\r\n\r\n    if (Array.isArray(options.plugins)) {\r\n        for (const plugin of options.plugins) {\r\n            try {\r\n                const result = plugin(proxyStore);\r\n                if (typeof result === 'function') {\r\n                    cleanups.push(result);\r\n                }\r\n            } \r\n            catch (e) {\r\n                console.error(`[statekit-lite] Plugin error \"${plugin.name}\":`, e);\r\n            }\r\n        }\r\n    }\r\n\r\n    (proxyStore as any).dispose = () => {\r\n        cleanups.forEach(fn => fn());\r\n    }\r\n\r\n\r\n    return proxyStore;\r\n}\r\n","import type { StorePlugin, ProxyState } from './store';\r\n\r\n\r\nexport interface SyncPluginOptions<T = any> {\r\n    /**\r\n     * Subscribes to remote data source (e.g. SSE, WebSocket, polling).     \r\n     * You must call `emit(data)` whenever new data arrives.        \r\n     * Returns an unsubscribe function.\r\n     */\r\n    subscribe: (emit: (data: T | ((prev: T) => T)) => void) => () => void;\r\n\r\n    /**\r\n     * Optional: pushes local store changes to a remote destination.        \r\n     * Called every time the specified store path is updated.\r\n     */\r\n    pushUpdate?: (data: T) => void\r\n\r\n    /**\r\n     * Optional: transforms incoming data before setting it to the store.\r\n     */\r\n    mapper?: (incoming: any) => T;\r\n\r\n    /**\r\n     * Optional: path to the specific store key you want to sync.       \r\n     * Example: ['chat', 'messages'] to target store.chat.messages.     \r\n     * If omitted, the root store will be used.\r\n     */\r\n    path?: (string | number)[]\r\n\r\n    /**\r\n     * Optional: enables debug logging for all incoming/outgoing events.\r\n     */\r\n    debug?: boolean\r\n}\r\n\r\n\r\n/**\r\n * Creates a synchronization plugin for statekit-lite.      \r\n * \r\n * This plugin allows you to connect a piece of store state to a remote source,\r\n * such as Server-Sent Events, WebSocket, or polling, and optionally push updates\r\n * back to the server whenever the state changes.\r\n *\r\n * You can specify a nested path within the store to target a specific key,\r\n * and customize the synchronization behavior via optional mapper and debug options.        \r\n *\r\n * @param options - Configuration for data subscription and update behavior\r\n * @returns A store plugin function compatible with statekit-lite\r\n */\r\nexport function syncPlugin<T>(options: SyncPluginOptions<T>): StorePlugin {\r\n    return (store: ProxyState<any>) => {\r\n        const { subscribe, pushUpdate, mapper, debug, path } = options;\r\n\r\n        const log = (...args: any[]) => debug && console.log('[syncPlugin]', ...args);\r\n\r\n        const isRoot = !path || path.length === 0;\r\n        const target = isRoot\r\n            ? store\r\n            : path.reduce((acc: any, key) => acc?.[key], store);\r\n\r\n        if (!target || typeof target.set !== 'function') {\r\n            log('❌ invalid target at path:', path);\r\n            return () => {};\r\n        }\r\n        \r\n        let ignoreNext = false;\r\n        // Входящие события\r\n        const unsubscribeRemote = subscribe((incoming) => {\r\n            const mapped = mapper ? mapper(incoming) : incoming;\r\n            log('⬇️ incoming:', mapped);\r\n\r\n            ignoreNext = true;\r\n            if (typeof mapped === 'function') {\r\n                target.set(mapped as (prev: T) => T);\r\n            } \r\n            else {\r\n                target.set(() => mapped); // оборачиваем, чтобы .set() не трогал prev\r\n            }\r\n        });\r\n\r\n        // Исходящие события\r\n        const unsub = pushUpdate\r\n            ? (isRoot\r\n                ? store.watch(() => {\r\n                    if (ignoreNext) {\r\n                        log('🛑 skipping push (from remote)');\r\n                        ignoreNext = false;\r\n                        return;\r\n                    }\r\n                    const val = store.get?.(true);\r\n                    log('⬆️ pushUpdate:', val);\r\n                    if (val !== undefined) pushUpdate(val);\r\n                })\r\n                : target.watch((val) => {\r\n                    if (ignoreNext) {\r\n                        log('🛑 skipping push (from remote)');\r\n                        ignoreNext = false;\r\n                        return;\r\n                    }\r\n                    log('⬆️ pushUpdate path:', val);\r\n                    if (val !== undefined) pushUpdate(val);\r\n                })\r\n            )\r\n            : undefined;\r\n\r\n        return () => {\r\n            unsubscribeRemote?.();\r\n            unsub?.();\r\n        }\r\n    };\r\n}","import type { StorePlugin } from '../store';\r\nimport { syncPlugin } from '../sync-plugin';\r\n\r\n\r\ntype SSEPluginOptions<T> = {\r\n  /** 🌐 URL path endpoint SSE */\r\n  url: string;\r\n\r\n  /** Path inside the store, e.g., ['messages'] or ['chat', 'list'] */\r\n  path?: (string | number)[];\r\n\r\n  /** Transforms incoming data before applying to the store */\r\n  mapper?: (data: any) => T;\r\n\r\n  /**\r\n   * Mode:\r\n   * - 'set' (default): replaces the store value\r\n   * - 'push': appends to an array\r\n   */\r\n  mode?: 'set' | 'push';\r\n\r\n  /** Enables debug logging */\r\n  debug?: boolean;\r\n}\r\n\r\n\r\nexport function ssePlugin<T = any>(options: SSEPluginOptions<T>): StorePlugin {\r\n\tconst { url, path, mapper, mode = 'set', debug } = options;\r\n\r\n\treturn syncPlugin<T>({\r\n\t\tpath,\r\n\t\tdebug,\r\n\t\tsubscribe: (emit) => {\r\n\t\t\tconst source = new EventSource(url);\r\n\r\n\t\t\tsource.onmessage = (e) => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst data = JSON.parse(e.data);\r\n\t\t\t\t\tconst mapped = mapper ? mapper(data) : data;\r\n\r\n\t\t\t\t\tif (debug) {\r\n\t\t\t\t\t\tconsole.log('[ssePlugin] raw:', data);\r\n\t\t\t\t\t\tconsole.log('[ssePlugin] mapped:', mapped);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (mode === 'push') {\r\n\t\t\t\t\t\temit(((prev: any) => [...(prev || []), mapped]) as (prev: T) => T);\r\n\t\t\t\t\t} \r\n\t\t\t\t\telse emit(mapped);\r\n\t\t\t\t} \r\n\t\t\t\tcatch (err) {\r\n\t\t\t\t\tif (debug) console.warn('[ssePlugin] parse error:', e.data);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn () => source.close();\r\n\t\t},\r\n\t});\r\n}"],"mappings":"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","names":[]}