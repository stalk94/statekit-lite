{"version":3,"sources":["../src/store.ts","../src/sse-plugin.ts"],"sourcesContent":["import { useSyncExternalStore } from \"react\";\r\nimport { produce } from \"immer\";\r\n\r\ntype ValueOrUpdater<T> = T | ((prev: T) => T);\r\ntype StorePlugin = (store: ProxyState<any>) => void;\r\n\r\nexport type ProxyState<T> = {\r\n    /** \r\n     *  🔗 `.get()` — object references  \r\n     *  🗐 `.get(true)` — structured clone \r\n     */\r\n    get: (clone?: boolean) => T;\r\n\r\n    /**\r\n     *  📌 `.set(value)` — direct replace  \r\n     *  🔁 `.set(prev => next)` — functional update  \r\n     *  🧠 `.set(draft => { draft.x = 1 })` — safe mutation via Immer  \r\n     */\r\n    set: (value: ValueOrUpdater<T>) => void;\r\n\r\n    /**\r\n     *  ✏️ Direct updater, same as `.set(prev => fn(prev))`  \r\n     */\r\n    update: (fn: (prev: T) => T) => void;\r\n\r\n    /**\r\n     *  ⚛️ React hook that subscribes to this value  \r\n     *  Automatically triggers re-render when value changes  \r\n     *\r\n     *  📌 Must be called inside a React component or hook  \r\n     */\r\n    use: () => T;\r\n\r\n    /**\r\n     *  👁 Subscribes to external (non-React) changes  \r\n     *  Useful for triggering side effects when value changes  \r\n     *\r\n     *  @returns Unsubscribe function\r\n     *  @example\r\n     *  const unsub = state.user.name.watch((val) => console.log(val));\r\n     *  unsub();\r\n     */\r\n    watch: (fn: (newValue: T) => void) => () => void;\r\n\r\n    /**\r\n     *  🗐 Returns a deep cloned plain value  \r\n     *  Functions and components are preserved by reference  \r\n     */\r\n    export: () => T;\r\n} & (T extends object\r\n    ? {\r\n        [K in keyof T]: ProxyState<T[K]>;\r\n    }\r\n    : {});\r\n\r\ntype PersistConfig = boolean | { key: string };\r\ninterface StoreOptions {\r\n    /** 🛢️ localStorage `{key: 'myState'}` */\r\n    persist?: PersistConfig;\r\n    /** ⚛️ enable redux dev tool log */\r\n    devtools?: boolean | { name: string };\r\n    /** 🔧 default: false */\r\n    immer?: boolean;\r\n    plugins?: StorePlugin[];\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////////\r\nfunction safeClone(obj: any): any {\r\n    if (typeof obj !== 'object' || obj === null) return obj;\r\n    if (Array.isArray(obj)) return obj.map(safeClone);\r\n\r\n    const result: any = {};\r\n    for (const key in obj) {\r\n        const val = obj[key];\r\n        result[key] = typeof val === 'function' ? val : safeClone(val);\r\n    }\r\n    return result;\r\n}\r\nfunction getByPath(obj: any, path: (string | number)[]): any {\r\n    return path.reduce((acc, key) => acc?.[key], obj);\r\n}\r\nfunction setByPath(obj: any, path: (string | number)[], val: any): any {\r\n    if (!path.length) return val;\r\n    const [key, ...rest] = path;\r\n    const isIndex = typeof key === \"number\" || /^\\d+$/.test(String(key));\r\n    const prev = obj ?? (isIndex ? [] : {});\r\n    const clone = Array.isArray(prev) ? [...prev] : { ...prev };\r\n    clone[key] = setByPath(prev[key], rest, val);\r\n    return clone;\r\n}\r\nfunction pathToString(path: (string | number)[]) {\r\n    return path.join(\".\");\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////////\r\n\r\n\r\nexport function createStore<T extends object>(\r\n    initialValue: T,\r\n    options: StoreOptions = {}\r\n): ProxyState<T> {\r\n    const key =\r\n        typeof options.persist === \"object\"\r\n            ? options.persist.key\r\n            : options.persist === true\r\n                ? \"statekit-store-\" + Math.random().toString(36).slice(2)\r\n                : null;\r\n\r\n    let value: T = initialValue;\r\n    let devtools: any = null;\r\n    let lastUpdatedPath: string | null = null;\r\n\r\n    if (typeof window !== 'undefined' && options.devtools) {\r\n        const ext = (window as any).__REDUX_DEVTOOLS_EXTENSION__;\r\n        if (ext?.connect) {\r\n            devtools = ext.connect({\r\n                name: typeof options.devtools === 'object' ? options.devtools.name ?? 'statekit' : 'statekit'\r\n            });\r\n            devtools.init(safeClone(value));\r\n        }\r\n    }\r\n    if (typeof window !== \"undefined\" && key) {\r\n        const stored = localStorage.getItem(key);\r\n        if (stored) {\r\n            try {\r\n                value = JSON.parse(stored);\r\n            } catch {\r\n                value = initialValue;\r\n            }\r\n        }\r\n    }\r\n\r\n    const listeners = new Set<() => void>();\r\n    const watchers = new Map<string, Set<(val: any) => void>>();\r\n    const notify = () => listeners.forEach((l) => l());\r\n\r\n    const store = {\r\n        get: () => value,\r\n        set: (v: T) => {\r\n            value = v;\r\n\r\n            if (typeof window !== \"undefined\" && key) {\r\n                localStorage.setItem(key, JSON.stringify(value));\r\n            }\r\n            if (devtools) {\r\n                devtools.send({ type: `[set] ${lastUpdatedPath ?? \"unknown\"}` }, safeClone(value));\r\n            }\r\n\r\n            notify();\r\n            watchers.forEach((fns, pathStr) => {\r\n                const path = pathStr.split(\".\");\r\n                const val = getByPath(value, path);\r\n                fns.forEach(fn => fn(val));\r\n            });\r\n        },\r\n        subscribe: (cb: () => void) => {\r\n            listeners.add(cb);\r\n            return () => listeners.delete(cb);\r\n        },\r\n    };\r\n\r\n    function createProxy(path: (string | number)[]): any {\r\n        const pathStr = pathToString(path);\r\n\r\n        const api = {\r\n            /** \r\n             *  🔗 `.get()` - object references,     \r\n             *  🗐  `.get(true)`- structured clone \r\n             */\r\n            get: (clone = false) => {\r\n                const val = getByPath(store.get(), path);\r\n                return clone ? structuredClone(val) : val;\r\n            },\r\n            /**\r\n             *  📌 `.set(value)` — direct replace   \r\n             *  🔁 `.set(prev => next)` — functional update  \r\n             *  🧠 `.set(draft => { draft.x = 1 })` — safe mutation via Immer   \r\n             */\r\n            set: (val: any) => {\r\n                const prev = getByPath(store.get(), path);\r\n\r\n                const next = typeof val === \"function\"\r\n                    ? options.immer ? produce(prev, val) : val(prev)\r\n                    : val;\r\n\r\n                lastUpdatedPath = pathStr;\r\n                store.set(setByPath(store.get(), path, next));\r\n            },\r\n            update: (fn: (prev: any) => any) => {\r\n                const current = getByPath(store.get(), path);\r\n                const next = fn(current);\r\n                store.set(setByPath(store.get(), path, next));\r\n            },\r\n            /**\r\n             *  ⚛️ React hook that subscribes to this value. Automatically triggers re-render when value changes  \r\n             *\r\n             *  📌 Must be called inside a React component or hook  \r\n             *  Equivalent to `.get()` but reactive  \r\n             *\r\n             *  @returns Current value of the state at this path\r\n             */\r\n            use: () => useSyncExternalStore(store.subscribe, () =>\r\n                getByPath(store.get(), path)\r\n            ),\r\n            /**\r\n             *  👁 Subscribes to external (non-React) changes  \r\n             *  Useful for triggering side effects when a value changes  \r\n             *\r\n             *  Unlike `.use()`, works outside of React lifecycle  \r\n             *  You must manually unsubscribe to avoid memory leaks\r\n             * \r\n             * @example\r\n             *  const unsubscribe = state.user.name.watch((val) => {\r\n             *      console.log(\"Changed:\", val);\r\n             *  });\r\n             * // later\r\n             *  unsubscribe();\r\n             * \r\n             * // or ract useEffect\r\n             * useEffect(() => {\r\n             *      const unsub = state.user.name.watch(console.log);\r\n             *      return unsub; // cleanup on unmount\r\n             *   }, []);\r\n             * \r\n             * \r\n             *  @param callback Function to call when value changes  \r\n             *  @returns Unsubscribe function\r\n             */\r\n            watch: (fn: (val: any) => void) => {\r\n                if (!watchers.has(pathStr)) {\r\n                    watchers.set(pathStr, new Set());\r\n                }\r\n                const set = watchers.get(pathStr)!;\r\n                set.add(fn);\r\n                return () => set.delete(fn);\r\n            },\r\n            /**\r\n             *  🗐 Returns a deep copy of the current value  \r\n             *  Safe to mutate or serialize (e.g. for export, snapshot, send to server)  \r\n             *\r\n             *  Functions and components are preserved by reference  \r\n             *  Proxy and reactivity are stripped\r\n             *\r\n             *  @returns Deep cloned plain value\r\n             */\r\n            export: () => safeClone(getByPath(store.get(), path)),\r\n            toJSON: () => getByPath(store.get(), path),\r\n        };\r\n\r\n        return new Proxy(api, {\r\n            get(target, prop) {\r\n                if (prop in target) return (target as any)[prop];\r\n                return createProxy([...path, prop as string]);\r\n            }\r\n        });\r\n    }\r\n\r\n    const proxyStore = createProxy([]) as ProxyState<T>;\r\n\r\n    if (Array.isArray(options.plugins)) {\r\n        for (const plugin of options.plugins) {\r\n            try {\r\n                plugin(proxyStore);\r\n            } \r\n            catch (e) {\r\n                console.warn('[statekit-lite] Plugin error:', e);\r\n            }\r\n        }\r\n    }\r\n\r\n    return proxyStore;\r\n}\r\n","import { ProxyState } from './store';\r\n\r\ntype SSEPluginOptions<T> = {\r\n    /**🌐 URL path endpoint SSE */\r\n    url: string;\r\n    /** Путь в store: ['messages'] или ['chat', 'list'] */\r\n    path?: (string | number)[];\r\n    /** Преобразование данных перед установкой */\r\n    mapper?: (data: any) => T;\r\n    /** \r\n     * Поведение: 'set' (по умолчанию) — перезапись значения, \r\n     * или 'push' — добавление в массив\r\n     */\r\n    mode?: 'set' | 'push';\r\n}\r\n\r\n\r\nexport default function ssePlugin<T = any>(options: SSEPluginOptions<T>) {\r\n    const { url, path, mapper, mode = 'set' } = options;\r\n\r\n    return (store: ProxyState<any>) => {\r\n        const source = new EventSource(url);\r\n\r\n        source.onmessage = (event) => {\r\n            try {\r\n                const parsed = JSON.parse(event.data);\r\n                const data = mapper ? mapper(parsed) : parsed;\r\n\r\n                if (!path || path.length === 0) {\r\n                    // если path не задан → пишем в корень\r\n                    if (mode === 'push') {\r\n                        throw new Error('[ssePlugin] mode: \"push\" недопустим без path');\r\n                    }\r\n                    store.set(data);\r\n                    return;\r\n                }\r\n\r\n                // иначе идём по пути\r\n                let target: any = store;\r\n                for (const key of path.slice(0, -1)) {\r\n                    target = target[key];\r\n                }\r\n\r\n                const lastKey = path[path.length - 1];\r\n\r\n                if (mode === 'push') {\r\n                    target[lastKey].update((prev: T[]) => [...(prev ?? []), data]);\r\n                } \r\n                else {\r\n                    target[lastKey].set(data);\r\n                }\r\n\r\n            } \r\n            catch (err) {\r\n                console.warn('[ssePlugin] Ошибка обработки:', err);\r\n            }\r\n        }\r\n\r\n        source.onerror = (err) => {\r\n            console.warn('[ssePlugin] Ошибка соединения:', err);\r\n        }\r\n    };\r\n}"],"mappings":"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","names":[]}